[doc Sanity check]

[macro prompt_back]
    !"get the prompt back".
    ???get the prompt back
[endmacro]

[shell cli]
    !make -C ../ start
    ???Eshell
    ???1>
    ???[info] Application transaktion started

    !Settings = #{ backend => file_backend,
    !              name    => db1 }.
    ???>

    # Actual test...
    !{ok, Th} = trans_api:create(Settings).
    ???[info] New transaction created
    ???>

    !trans_api:add(Th, {tab, {k1, v1}}).
    ???{ok,key_added,k1}
    ???>

    !trans_api:read(Th, {tab, k1}).
    ???{ok,value,v1}
    ???>

    !trans_api:add(Th, {tab, {k2, v2}}).
    ???{ok,key_added,k2}
    ???>

    !trans_api:debug(Th).
    ???[info] Table: tab
    ???[info]   Key: k1, Value: {set,v1}
    ???[info]   Key: k2, Value: {set,v2}
    ???>

    !trans_api:commit(Th).
    ???db_core commit
    ???>

    !trans_api:delete(Th, {tab, k1}).
    ???{ok,key_deleted,k1}
    ???>

    !trans_api:debug(Th).
    ???[info] Table: tab
    ???[info]   Key: k1, Value: delete
    ???[info]   Key: k2, Value: {set,v2}
    ???>

    # commit delete
    !trans_api:commit(Th).
    ???db_core commit
    ???>

    !trans_api:discard(Th).
    ???{ok,transaction_discarded}
    ???>

    !{ok, Th2} = trans_api:create(Settings).
    ???[info] New transaction created
    ???>

    # now, only k2 should be visible, not k1
    !trans_api:debug_merge(Th2).
    ???[info] Table: tab
    ???[info]   Key: k2, Value: v2
    # no > here, it can be before since debug is async
    [invoke prompt_back]

    !trans_api:read(Th2, {tab, k2}).
    ???{ok,value,v2}

    !trans_api:read(Th2, {tab, k1}).
    ???{error,not_existing}

    !trans_api:add(Th2, {tab, {k2, v55}}).
    ???{ok,key_added,k2}
    ???>

    !trans_api:read(Th2, {tab, k2}).
    ???{ok,value,v55}

    !trans_api:commit(Th2).
    ???db_core commit
    ???>

    !trans_api:debug_merge(Th2).
    ???[info] Table: tab
    ???[info]   Key: k2, Value: v55
    [invoke prompt_back]

    !trans_api:add(Th2, {tabx, {somekey, "ojoj!"}}).
    ???>

    !trans_api:debug_merge(Th2).
    ???[info] Table: tab
    ???[info]   Key: k2, Value: v55
    ???[info] Table: tabx
    ???[info]   Key: somekey, Value: "ojoj!"
    [invoke prompt_back]

    !trans_api:commit(Th2).
    ???db_core commit
    ???>

    # Now delete a non existing value, this should
    # be OK to do, but not OK to commit.

    !trans_api:delete(Th2, {tab, <<"NON EXISTING KEY">>}).
    ???{ok,key_deleted,<<"NON EXISTING KEY">>}
    ???>

    !trans_api:commit(Th2).
    ???Commit failed, attempt to delete non existing value.
    ???>

    !trans_api:discard(Th2).
    ???{ok,transaction_discarded}
    ???>

    !{ok, Th3} = trans_api:create(Settings).
    ???[info] New transaction created
    ???>

    # try to delete a non existing value in a non existing table.
    !trans_api:delete(Th3, {tabadw, <<"NON EXISTING KEY">>}).
    ???{ok,key_deleted,<<"NON EXISTING KEY">>}
    ???>

    !trans_api:commit(Th3).
    ???Commit failed, attempt to delete non existing value.
    ???>

    !q().
    ?SH-PROMPT:

    !echo ==$?==
    ?==0==
    !exit
    [endshell]

[cleanup]
    !rm -rf db_file
